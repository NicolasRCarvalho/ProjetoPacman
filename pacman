#include <stdio.h>
#include <raylib.h>
#include <stdlib.h>

#define LAR_TELA 800
#define ALT_TELA 640
#define COLUNAS_MAPA 40
#define LINHAS_MAPA 32
#define TAM_PIXEL 20

typedef struct tipo_score
{
    char nome[30];
    int score;
} TIPO_SCORE;

// Função que exibe o menu
int chama_menu()
{
    // Definindo variáveis locais
    int posMarcador = 0;
    // Inicializando tela
    InitWindow(LAR_TELA, ALT_TELA, "MENU");
    SetTargetFPS(60);

    // Looping do menu
    while (!WindowShouldClose())
    {
        BeginDrawing(); // Inicia o ambiente de desenho na tela
        ClearBackground(BLACK); // Limpa a tela e define cor de fundo

        // TEXTOS DO MENU
        DrawText("PAC-MAN", 30, 20, 130, YELLOW);
        DrawText("NOVO-JOGO", 30, 160, 80, YELLOW);
        DrawText("CARREGAR-JOGO", 30, 260, 80, YELLOW);
        DrawText("HIGHSCORES", 30, 360, 80, YELLOW);
        DrawText("SAIR", 30, 460, 80, YELLOW);
        DrawText("|W| |S| |ENTER|", 580, 600, 30, GRAY);

        // LÓGICA DO MARCADOR DO MENU
        if (IsKeyPressed(KEY_W)) posMarcador--;
        if (IsKeyPressed(KEY_S)) posMarcador++;
        // Posição 1 do marcador
        if (posMarcador == 0)
            DrawCircle(550, 195, 25, YELLOW);
        // Posição 2 do marcador
        if (posMarcador == 1)
            DrawCircle(765, 295, 25, YELLOW);
        // Posição 3 do marcador
        if (posMarcador == 2)
            DrawCircle(600, 398, 25, YELLOW);
        // Posição 4 do marcador
        if (posMarcador == 3)
            DrawCircle(262, 498, 25, YELLOW);
        // Lógica do vai e volta do marcador
        if (posMarcador == 4)
            posMarcador = 0;
        if (posMarcador == -1)
            posMarcador = 3;
        // Lógica de seleção da opção
        if (IsKeyPressed(KEY_ENTER))
        {
            CloseWindow();
            return posMarcador;
        }

        EndDrawing();
    }
}

// Função que puxa o mapa do arquivo .txt
void carrega_mapa(const char *nome_mapa, char matriz_mapa[LINHAS_MAPA][COLUNAS_MAPA])
{
    // Definindo variáveis locais
    FILE *mapa; // Ponteiro para o arquivo do mapa
    int i; // Iterador

    // Abrindo arquivo do mapa
    mapa = fopen(nome_mapa, "r");
    if (mapa == NULL)
    {
        printf("Erro ao abrir mapa");
        return;
    }

    // Lendo o mapa do arquivo
    for (i = 0; i < LINHAS_MAPA; i++)
    {
        fgets(matriz_mapa[i], COLUNAS_MAPA + 2, mapa); // +2 para incluir o '\n' e o '\0'
    }

    fclose(mapa);
}

// Função para imprimir mapa
// Parede (caractere “W”).
// Monstros (caractere “M”)
// Frutas (caractere “F”)
// Pastilhas (caractere “.”)
// Superpastilhas (caractere “P”)
// Jogador (caractere “J”)
void desenha_mapa(char matriz_mapa[LINHAS_MAPA][COLUNAS_MAPA])
{
    // Definindo variáveis locais
    int i, j;
    for (i = 0; i < LINHAS_MAPA; i++)
    {
        for (j = 0; j < COLUNAS_MAPA; j++)
        {
            switch (matriz_mapa[i][j])
            {
            case 'W':
                DrawRectangle(j * TAM_PIXEL, i * TAM_PIXEL, TAM_PIXEL, TAM_PIXEL, BLUE);
                break;
            case 'F':
                DrawCircle(j * TAM_PIXEL + TAM_PIXEL / 2, i * TAM_PIXEL + TAM_PIXEL / 2, TAM_PIXEL / 2, RED);
                break;
            case 'M':
                DrawCircle(j * TAM_PIXEL + TAM_PIXEL / 2, i * TAM_PIXEL + TAM_PIXEL / 2, TAM_PIXEL / 2, GREEN);
                break;
            case 'J':
                DrawCircle(j * TAM_PIXEL + TAM_PIXEL / 2, i * TAM_PIXEL + TAM_PIXEL / 2, TAM_PIXEL / 2, YELLOW);
                break;
            case '.':
                DrawCircle(j * TAM_PIXEL + TAM_PIXEL / 2, i * TAM_PIXEL + TAM_PIXEL / 2, TAM_PIXEL / 4, WHITE);
                break;
            case 'S':
                DrawCircle(j * TAM_PIXEL + TAM_PIXEL / 2, i * TAM_PIXEL + TAM_PIXEL / 2, TAM_PIXEL / 4, ORANGE);
                break;
            default:
                break;
            }
        }
    }
}

void novo_jogo()
{
    // Definindo variáveis locais
    char matriz_mapa[LINHAS_MAPA][COLUNAS_MAPA];

    // Carregando primeiro mapa para a Matriz do mapa
    carrega_mapa("mapa1.txt", matriz_mapa);

    // Inicializando tela
    InitWindow(LAR_TELA, ALT_TELA, "MAPA1");
    SetTargetFPS(60);

    // Looping do jogo
    while (!WindowShouldClose())
    {
        BeginDrawing(); // Inicia o ambiente de desenho na tela
        ClearBackground(BLACK); // Limpa a tela e define cor de fundo
        desenha_mapa(matriz_mapa); // Chama função para desenhar mapa
        EndDrawing();
    }

    CloseWindow();
}

int main()
{
    int opcao = -1; // Indica a opção selecionada no menu

    opcao = chama_menu();
    // Retornar 0 -> Novo jogo
    // Retornar 1 -> Carregar jogo
    // Retornar 2 -> Abre ranking
    // Retornar 3 -> Fecha jogo

    // Chama função referente à opção selecionada
    switch (opcao)
    {
    case 0:
        novo_jogo();
        break;
    case 1:
        break;
    case 2:
        break;
    case 3:
        break;
    }

    return 0;
}
